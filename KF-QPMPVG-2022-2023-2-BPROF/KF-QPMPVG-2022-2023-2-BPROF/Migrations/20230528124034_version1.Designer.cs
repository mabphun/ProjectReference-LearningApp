// <auto-generated />
using System;
using KF_QPMPVG_2022_2023_2_BPROF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KF_QPMPVG_2022_2023_2_BPROF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230528124034_version1")]
    partial class version1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KF_QPMPVG_2022_2023_2_BPROF.Models.Card", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearningSetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LearningSetId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = "f24f6297-8a6d-4f47-aea6-475bc647aac8",
                            Answer = "Test!",
                            Image = "https://picsum.photos/200/300",
                            LearningSetId = "fb572150-8ebe-4c89-9bf7-1e097756ce84",
                            Question = "Test?"
                        },
                        new
                        {
                            Id = "9365e710-d910-4e82-8e72-77b59ef2cf94",
                            Answer = "Alma",
                            Image = "",
                            LearningSetId = "23de61a2-e44f-4384-b78b-fca06a97af24",
                            Question = "Apple"
                        },
                        new
                        {
                            Id = "3116433b-8fde-4a2e-8681-5472ba8771e2",
                            Answer = "Autó",
                            Image = "",
                            LearningSetId = "23de61a2-e44f-4384-b78b-fca06a97af24",
                            Question = "Car"
                        },
                        new
                        {
                            Id = "966bcf59-7193-45ee-9be3-8c506ced73d3",
                            Answer = "Repülő",
                            Image = "https://picsum.photos/200/300",
                            LearningSetId = "23de61a2-e44f-4384-b78b-fca06a97af24",
                            Question = "Plane"
                        },
                        new
                        {
                            Id = "c8c23bc2-0c33-4415-a820-13b185592a0f",
                            Answer = "Test Answer",
                            Image = "https://picsum.photos/200/300",
                            LearningSetId = "7788dc19-82de-4738-b4c5-82640db52e55",
                            Question = "Test Question"
                        });
                });

            modelBuilder.Entity("KF_QPMPVG_2022_2023_2_BPROF.Models.LearningSet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Sets");

                    b.HasData(
                        new
                        {
                            Id = "fb572150-8ebe-4c89-9bf7-1e097756ce84",
                            Description = "TestDesc1",
                            IsPrivate = false,
                            Name = "Test1",
                            OwnerId = "e10b1b11-8e09-4613-b875-f9cbb4ab0dfa"
                        },
                        new
                        {
                            Id = "000c669b-5b09-42fa-862e-d460a455cd1c",
                            Description = "TestDesc2",
                            IsPrivate = true,
                            Name = "Test2",
                            OwnerId = "b61cc132-1ab6-4dfd-b814-3f63a2848bfd"
                        },
                        new
                        {
                            Id = "23de61a2-e44f-4384-b78b-fca06a97af24",
                            Description = "This is an english test",
                            IsPrivate = false,
                            Name = "English test",
                            OwnerId = "572beb97-e5d8-4398-bf36-1241149590ac"
                        },
                        new
                        {
                            Id = "e4f89122-3fde-4ed6-8630-e4b4aaf9dadc",
                            Description = "LearningSetDesc4",
                            IsPrivate = true,
                            Name = "LearningSet4",
                            OwnerId = "b61cc132-1ab6-4dfd-b814-3f63a2848bfd"
                        },
                        new
                        {
                            Id = "7788dc19-82de-4738-b4c5-82640db52e55",
                            Description = "Random description",
                            IsPrivate = false,
                            Name = "Random learning set",
                            OwnerId = "572beb97-e5d8-4398-bf36-1241149590ac"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KF_QPMPVG_2022_2023_2_BPROF.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimesCompleted")
                        .HasColumnType("int");

                    b.Property<int>("TimesPlayed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "e10b1b11-8e09-4613-b875-f9cbb4ab0dfa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4da2f7b-3450-435d-93c3-ad7a47af71dc",
                            Email = "user1@user.hu",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBPUq+lWkYYELE04y8TkmaFTrGCXemasfRmPBGRaY2hqVWr9dWKS/kCka4XP1B+nkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c560b728-5a60-4546-9cad-16e286ba6803",
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            Image = "https://picsum.photos/200/300",
                            TimesCompleted = 0,
                            TimesPlayed = 0
                        },
                        new
                        {
                            Id = "b61cc132-1ab6-4dfd-b814-3f63a2848bfd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bb8c4d8-6ab7-48be-bc15-f486c6b4c376",
                            Email = "user2@user.hu",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHZHsdNUvIm7qt3+zrV1xrJsH7ySVBo6f2yEdO6OLgA1nlP/tf7Fk/nBXJmMhK08jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3634b30d-a872-40e7-b267-55bf3db74403",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            Image = "https://picsum.photos/200/300",
                            TimesCompleted = 0,
                            TimesPlayed = 0
                        },
                        new
                        {
                            Id = "572beb97-e5d8-4398-bf36-1241149590ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e7ef522-abe1-4ae7-bbc9-8918eb2c4aa9",
                            Email = "molnar.akos@user.hu",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "MOLNARA",
                            PasswordHash = "AQAAAAEAACcQAAAAEGdodRSx9IQ8IgDFdXWTHCuRekX1vZicsFo0pR2mUCWhC6sCc6TlFm47qJ2HEs30OQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d313e3b5-e9b7-4f23-b881-f500168f7696",
                            TwoFactorEnabled = false,
                            UserName = "molnara",
                            Image = "https://fastly.picsum.photos/id/916/200/200.jpg?hmac=hEUrLG-ayFdIoyHKUwazT8SMEsVxWH9xGz4tx-e0cN0",
                            TimesCompleted = 0,
                            TimesPlayed = 0
                        });
                });

            modelBuilder.Entity("KF_QPMPVG_2022_2023_2_BPROF.Models.Card", b =>
                {
                    b.HasOne("KF_QPMPVG_2022_2023_2_BPROF.Models.LearningSet", "LearningSet")
                        .WithMany("Cards")
                        .HasForeignKey("LearningSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningSet");
                });

            modelBuilder.Entity("KF_QPMPVG_2022_2023_2_BPROF.Models.LearningSet", b =>
                {
                    b.HasOne("KF_QPMPVG_2022_2023_2_BPROF.Models.AppUser", "Owner")
                        .WithMany("OwnedSets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KF_QPMPVG_2022_2023_2_BPROF.Models.LearningSet", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("KF_QPMPVG_2022_2023_2_BPROF.Models.AppUser", b =>
                {
                    b.Navigation("OwnedSets");
                });
#pragma warning restore 612, 618
        }
    }
}
